// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccessPermissionType string

const (
	AccessPermissionTypeADMIN  AccessPermissionType = "ADMIN"
	AccessPermissionTypeMEMBER AccessPermissionType = "MEMBER"
)

func (e *AccessPermissionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccessPermissionType(s)
	case string:
		*e = AccessPermissionType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccessPermissionType: %T", src)
	}
	return nil
}

type NullAccessPermissionType struct {
	AccessPermissionType AccessPermissionType `json:"access_permission_type"`
	Valid                bool                 `json:"valid"` // Valid is true if AccessPermissionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccessPermissionType) Scan(value interface{}) error {
	if value == nil {
		ns.AccessPermissionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccessPermissionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccessPermissionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccessPermissionType), nil
}

type Project struct {
	ID          pgtype.UUID        `json:"id"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

type User struct {
	ID         pgtype.UUID        `json:"id"`
	FirebaseID string             `json:"firebase_id"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

type UserProject struct {
	UserID               pgtype.UUID          `json:"user_id"`
	ProjectID            pgtype.UUID          `json:"project_id"`
	Permission           AccessPermissionType `json:"permission"`
	IsUserDefaultProject bool                 `json:"is_user_default_project"`
}
