// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT EXISTS(SELECT 1 FROM "user" WHERE firebase_id = $1)
`

func (q *Queries) CheckUserExists(ctx context.Context, firebaseID string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExists, firebaseID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createApplication = `-- name: CreateApplication :one
INSERT INTO "application" (
    app_id,
    description,
    name,
    project_id,
    public_key
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, app_id, description, name, public_key, project_id, created_at, updated_at
`

type CreateApplicationParams struct {
	AppID       string      `json:"app_id"`
	Description string      `json:"description"`
	Name        string      `json:"name"`
	ProjectID   pgtype.UUID `json:"project_id"`
	PublicKey   string      `json:"public_key"`
}

func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.db.QueryRow(ctx, createApplication,
		arg.AppID,
		arg.Description,
		arg.Name,
		arg.ProjectID,
		arg.PublicKey,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.AppID,
		&i.Description,
		&i.Name,
		&i.PublicKey,
		&i.ProjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createApplicationPromptConfig = `-- name: CreateApplicationPromptConfig :one
INSERT INTO "application_prompt_config" (
    application_id,
    prompt_config_id,
    version,
    is_latest
) VALUES ($1, $2, $3, $4) RETURNING application_id, prompt_config_id, version, is_latest
`

type CreateApplicationPromptConfigParams struct {
	ApplicationID  pgtype.UUID `json:"application_id"`
	PromptConfigID pgtype.UUID `json:"prompt_config_id"`
	Version        int32       `json:"version"`
	IsLatest       bool        `json:"is_latest"`
}

func (q *Queries) CreateApplicationPromptConfig(ctx context.Context, arg CreateApplicationPromptConfigParams) (ApplicationPromptConfig, error) {
	row := q.db.QueryRow(ctx, createApplicationPromptConfig,
		arg.ApplicationID,
		arg.PromptConfigID,
		arg.Version,
		arg.IsLatest,
	)
	var i ApplicationPromptConfig
	err := row.Scan(
		&i.ApplicationID,
		&i.PromptConfigID,
		&i.Version,
		&i.IsLatest,
	)
	return i, err
}

const createProject = `-- name: CreateProject :one
INSERT INTO project (name, description)
VALUES ($1, $2)
RETURNING id, name, description, created_at
`

type CreateProjectParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.Name, arg.Description)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const createPromptConfig = `-- name: CreatePromptConfig :one
INSERT INTO "prompt_config" (
    model_type,
    model_vendor,
    model_parameters,
    prompt_template,
    template_variables
) VALUES ($1, $2, $3, $4, $5) RETURNING id, model_type, model_vendor, model_parameters, prompt_template, template_variables, created_at, updated_at
`

type CreatePromptConfigParams struct {
	ModelType         ModelType   `json:"model_type"`
	ModelVendor       ModelVendor `json:"model_vendor"`
	ModelParameters   []byte      `json:"model_parameters"`
	PromptTemplate    []byte      `json:"prompt_template"`
	TemplateVariables []byte      `json:"template_variables"`
}

func (q *Queries) CreatePromptConfig(ctx context.Context, arg CreatePromptConfigParams) (PromptConfig, error) {
	row := q.db.QueryRow(ctx, createPromptConfig,
		arg.ModelType,
		arg.ModelVendor,
		arg.ModelParameters,
		arg.PromptTemplate,
		arg.TemplateVariables,
	)
	var i PromptConfig
	err := row.Scan(
		&i.ID,
		&i.ModelType,
		&i.ModelVendor,
		&i.ModelParameters,
		&i.PromptTemplate,
		&i.TemplateVariables,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (firebase_id)
VALUES ($1)
RETURNING id, firebase_id, created_at
`

func (q *Queries) CreateUser(ctx context.Context, firebaseID string) (User, error) {
	row := q.db.QueryRow(ctx, createUser, firebaseID)
	var i User
	err := row.Scan(&i.ID, &i.FirebaseID, &i.CreatedAt)
	return i, err
}

const createUserProject = `-- name: CreateUserProject :one
INSERT INTO user_project (
    user_id, project_id, permission, is_user_default_project
)
VALUES ($1, $2, $3, $4)
RETURNING user_id, project_id, permission, is_user_default_project
`

type CreateUserProjectParams struct {
	UserID               pgtype.UUID          `json:"user_id"`
	ProjectID            pgtype.UUID          `json:"project_id"`
	Permission           AccessPermissionType `json:"permission"`
	IsUserDefaultProject bool                 `json:"is_user_default_project"`
}

func (q *Queries) CreateUserProject(ctx context.Context, arg CreateUserProjectParams) (UserProject, error) {
	row := q.db.QueryRow(ctx, createUserProject,
		arg.UserID,
		arg.ProjectID,
		arg.Permission,
		arg.IsUserDefaultProject,
	)
	var i UserProject
	err := row.Scan(
		&i.UserID,
		&i.ProjectID,
		&i.Permission,
		&i.IsUserDefaultProject,
	)
	return i, err
}

const deleteApplication = `-- name: DeleteApplication :exec
DELETE FROM "application"
WHERE id = $1
`

func (q *Queries) DeleteApplication(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteApplication, id)
	return err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE
FROM "project"
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const deletePromptConfig = `-- name: DeletePromptConfig :exec
DELETE FROM "prompt_config"
WHERE id = $1
`

func (q *Queries) DeletePromptConfig(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePromptConfig, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM "user"
WHERE firebase_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, firebaseID string) error {
	_, err := q.db.Exec(ctx, deleteUser, firebaseID)
	return err
}

const deleteUserProject = `-- name: DeleteUserProject :exec
DELETE
FROM "user_project"
WHERE project_id = $1
`

func (q *Queries) DeleteUserProject(ctx context.Context, projectID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserProject, projectID)
	return err
}

const findApplicationByAppIdAndProjectId = `-- name: FindApplicationByAppIdAndProjectId :one
SELECT
    id,
    app_id,
    description,
    name,
    public_key
FROM "application"
WHERE app_id = $1 AND project_id = $2
`

type FindApplicationByAppIdAndProjectIdParams struct {
	AppID     string      `json:"app_id"`
	ProjectID pgtype.UUID `json:"project_id"`
}

type FindApplicationByAppIdAndProjectIdRow struct {
	ID          pgtype.UUID `json:"id"`
	AppID       string      `json:"app_id"`
	Description string      `json:"description"`
	Name        string      `json:"name"`
	PublicKey   string      `json:"public_key"`
}

func (q *Queries) FindApplicationByAppIdAndProjectId(ctx context.Context, arg FindApplicationByAppIdAndProjectIdParams) (FindApplicationByAppIdAndProjectIdRow, error) {
	row := q.db.QueryRow(ctx, findApplicationByAppIdAndProjectId, arg.AppID, arg.ProjectID)
	var i FindApplicationByAppIdAndProjectIdRow
	err := row.Scan(
		&i.ID,
		&i.AppID,
		&i.Description,
		&i.Name,
		&i.PublicKey,
	)
	return i, err
}

const findProjectApplications = `-- name: FindProjectApplications :many
SELECT
    id,
    app_id,
    description,
    name
FROM "application"
WHERE project_id = $1
`

type FindProjectApplicationsRow struct {
	ID          pgtype.UUID `json:"id"`
	AppID       string      `json:"app_id"`
	Description string      `json:"description"`
	Name        string      `json:"name"`
}

func (q *Queries) FindProjectApplications(ctx context.Context, projectID pgtype.UUID) ([]FindProjectApplicationsRow, error) {
	rows, err := q.db.Query(ctx, findProjectApplications, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindProjectApplicationsRow
	for rows.Next() {
		var i FindProjectApplicationsRow
		if err := rows.Scan(
			&i.ID,
			&i.AppID,
			&i.Description,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findProjectsByUserId = `-- name: FindProjectsByUserId :many
SELECT
    p.created_at,
    p.description,
    p.id,
    p.name,
    up.is_user_default_project,
    up.permission
FROM project AS p
INNER JOIN user_project AS up ON p.id = up.project_id
WHERE up.user_id = $1
`

type FindProjectsByUserIdRow struct {
	CreatedAt            pgtype.Timestamptz   `json:"created_at"`
	Description          string               `json:"description"`
	ID                   pgtype.UUID          `json:"id"`
	Name                 string               `json:"name"`
	IsUserDefaultProject bool                 `json:"is_user_default_project"`
	Permission           AccessPermissionType `json:"permission"`
}

func (q *Queries) FindProjectsByUserId(ctx context.Context, userID pgtype.UUID) ([]FindProjectsByUserIdRow, error) {
	rows, err := q.db.Query(ctx, findProjectsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindProjectsByUserIdRow
	for rows.Next() {
		var i FindProjectsByUserIdRow
		if err := rows.Scan(
			&i.CreatedAt,
			&i.Description,
			&i.ID,
			&i.Name,
			&i.IsUserDefaultProject,
			&i.Permission,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPromptConfigByAppId = `-- name: FindPromptConfigByAppId :one
SELECT
    pc.id,
    pc.model_type,
    pc.model_vendor,
    pc.model_parameters,
    pc.prompt_template,
    pc.template_variables,
    pc.created_at,
    pc.updated_at
FROM "prompt_config" AS pc
LEFT JOIN "application_prompt_config" AS apc ON pc.id = apc.prompt_config_id
WHERE apc.application_id = $1 AND (apc.version = $2 OR apc.is_latest = true)
`

type FindPromptConfigByAppIdParams struct {
	ApplicationID pgtype.UUID `json:"application_id"`
	Version       int32       `json:"version"`
}

func (q *Queries) FindPromptConfigByAppId(ctx context.Context, arg FindPromptConfigByAppIdParams) (PromptConfig, error) {
	row := q.db.QueryRow(ctx, findPromptConfigByAppId, arg.ApplicationID, arg.Version)
	var i PromptConfig
	err := row.Scan(
		&i.ID,
		&i.ModelType,
		&i.ModelVendor,
		&i.ModelParameters,
		&i.PromptTemplate,
		&i.TemplateVariables,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByFirebaseId = `-- name: FindUserByFirebaseId :one
SELECT
    id,
    firebase_id,
    created_at
FROM "user"
WHERE firebase_id = $1
`

func (q *Queries) FindUserByFirebaseId(ctx context.Context, firebaseID string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByFirebaseId, firebaseID)
	var i User
	err := row.Scan(&i.ID, &i.FirebaseID, &i.CreatedAt)
	return i, err
}

const updateApplication = `-- name: UpdateApplication :one
UPDATE "application"
SET
    app_id = $1,
    description = $2,
    name = $3,
    public_key = $4,
    updated_at = NOW()
WHERE id = $5 RETURNING id, app_id, description, name, public_key, project_id, created_at, updated_at
`

type UpdateApplicationParams struct {
	AppID       string      `json:"app_id"`
	Description string      `json:"description"`
	Name        string      `json:"name"`
	PublicKey   string      `json:"public_key"`
	ID          pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateApplication(ctx context.Context, arg UpdateApplicationParams) (Application, error) {
	row := q.db.QueryRow(ctx, updateApplication,
		arg.AppID,
		arg.Description,
		arg.Name,
		arg.PublicKey,
		arg.ID,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.AppID,
		&i.Description,
		&i.Name,
		&i.PublicKey,
		&i.ProjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePromptConfig = `-- name: UpdatePromptConfig :one
UPDATE "prompt_config"
SET
    model_type = $1,
    model_vendor = $2,
    model_parameters = $3,
    prompt_template = $4,
    template_variables = $5
WHERE id = $6 RETURNING id, model_type, model_vendor, model_parameters, prompt_template, template_variables, created_at, updated_at
`

type UpdatePromptConfigParams struct {
	ModelType         ModelType   `json:"model_type"`
	ModelVendor       ModelVendor `json:"model_vendor"`
	ModelParameters   []byte      `json:"model_parameters"`
	PromptTemplate    []byte      `json:"prompt_template"`
	TemplateVariables []byte      `json:"template_variables"`
	ID                pgtype.UUID `json:"id"`
}

func (q *Queries) UpdatePromptConfig(ctx context.Context, arg UpdatePromptConfigParams) (PromptConfig, error) {
	row := q.db.QueryRow(ctx, updatePromptConfig,
		arg.ModelType,
		arg.ModelVendor,
		arg.ModelParameters,
		arg.PromptTemplate,
		arg.TemplateVariables,
		arg.ID,
	)
	var i PromptConfig
	err := row.Scan(
		&i.ID,
		&i.ModelType,
		&i.ModelVendor,
		&i.ModelParameters,
		&i.PromptTemplate,
		&i.TemplateVariables,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
