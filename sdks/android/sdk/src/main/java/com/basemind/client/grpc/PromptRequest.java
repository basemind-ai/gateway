// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway/v1/gateway.proto

package com.basemind.client.grpc;

/**
 * <pre>
 * A request for a prompt - sending user input to the server.
 * </pre>
 *
 * Protobuf type {@code gateway.v1.PromptRequest}
 */
public  final class PromptRequest extends
    com.google.protobuf.GeneratedMessageLite<
        PromptRequest, PromptRequest.Builder> implements
    // @@protoc_insertion_point(message_implements:gateway.v1.PromptRequest)
    PromptRequestOrBuilder {
  private PromptRequest() {
  }
  public static final int TEMPLATE_VARIABLES_FIELD_NUMBER = 1;
  private static final class TemplateVariablesDefaultEntryHolder {
    static final com.google.protobuf.MapEntryLite<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntryLite
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapFieldLite<
      java.lang.String, java.lang.String> templateVariables_ =
          com.google.protobuf.MapFieldLite.emptyMapField();
  private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
  internalGetTemplateVariables() {
    return templateVariables_;
  }
  private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
  internalGetMutableTemplateVariables() {
    if (!templateVariables_.isMutable()) {
      templateVariables_ = templateVariables_.mutableCopy();
    }
    return templateVariables_;
  }
  @java.lang.Override

  public int getTemplateVariablesCount() {
    return internalGetTemplateVariables().size();
  }
  /**
   * <pre>
   * The User prompt variables
   * This is a hash-map of variables that should have the same keys as those contained by the PromptConfigResponse
   * </pre>
   *
   * <code>map&lt;string, string&gt; template_variables = 1 [json_name = "templateVariables"];</code>
   */
  @java.lang.Override

  public boolean containsTemplateVariables(
      java.lang.String key) {
    java.lang.Class<?> keyClass = key.getClass();
    return internalGetTemplateVariables().containsKey(key);
  }
  /**
   * Use {@link #getTemplateVariablesMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getTemplateVariables() {
    return getTemplateVariablesMap();
  }
  /**
   * <pre>
   * The User prompt variables
   * This is a hash-map of variables that should have the same keys as those contained by the PromptConfigResponse
   * </pre>
   *
   * <code>map&lt;string, string&gt; template_variables = 1 [json_name = "templateVariables"];</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, java.lang.String> getTemplateVariablesMap() {
    return java.util.Collections.unmodifiableMap(
        internalGetTemplateVariables());
  }
  /**
   * <pre>
   * The User prompt variables
   * This is a hash-map of variables that should have the same keys as those contained by the PromptConfigResponse
   * </pre>
   *
   * <code>map&lt;string, string&gt; template_variables = 1 [json_name = "templateVariables"];</code>
   */
  @java.lang.Override

  public /* nullable */
java.lang.String getTemplateVariablesOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue) {
    java.lang.Class<?> keyClass = key.getClass();
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetTemplateVariables();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * The User prompt variables
   * This is a hash-map of variables that should have the same keys as those contained by the PromptConfigResponse
   * </pre>
   *
   * <code>map&lt;string, string&gt; template_variables = 1 [json_name = "templateVariables"];</code>
   */
  @java.lang.Override

  public java.lang.String getTemplateVariablesOrThrow(
      java.lang.String key) {
    java.lang.Class<?> keyClass = key.getClass();
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetTemplateVariables();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }
  /**
   * <pre>
   * The User prompt variables
   * This is a hash-map of variables that should have the same keys as those contained by the PromptConfigResponse
   * </pre>
   *
   * <code>map&lt;string, string&gt; template_variables = 1 [json_name = "templateVariables"];</code>
   */
  private java.util.Map<java.lang.String, java.lang.String>
  getMutableTemplateVariablesMap() {
    return internalGetMutableTemplateVariables();
  }

  public static com.basemind.client.grpc.PromptRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.basemind.client.grpc.PromptRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.basemind.client.grpc.PromptRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.basemind.client.grpc.PromptRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.basemind.client.grpc.PromptRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.basemind.client.grpc.PromptRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.basemind.client.grpc.PromptRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.basemind.client.grpc.PromptRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.basemind.client.grpc.PromptRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.basemind.client.grpc.PromptRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.basemind.client.grpc.PromptRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.basemind.client.grpc.PromptRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.basemind.client.grpc.PromptRequest prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * A request for a prompt - sending user input to the server.
   * </pre>
   *
   * Protobuf type {@code gateway.v1.PromptRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.basemind.client.grpc.PromptRequest, Builder> implements
      // @@protoc_insertion_point(builder_implements:gateway.v1.PromptRequest)
      com.basemind.client.grpc.PromptRequestOrBuilder {
    // Construct using com.basemind.client.grpc.PromptRequest.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    @java.lang.Override

    public int getTemplateVariablesCount() {
      return instance.getTemplateVariablesMap().size();
    }
    /**
     * <pre>
     * The User prompt variables
     * This is a hash-map of variables that should have the same keys as those contained by the PromptConfigResponse
     * </pre>
     *
     * <code>map&lt;string, string&gt; template_variables = 1 [json_name = "templateVariables"];</code>
     */
    @java.lang.Override

    public boolean containsTemplateVariables(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      return instance.getTemplateVariablesMap().containsKey(key);
    }

    public Builder clearTemplateVariables() {
      copyOnWrite();
      instance.getMutableTemplateVariablesMap().clear();
      return this;
    }
    /**
     * <pre>
     * The User prompt variables
     * This is a hash-map of variables that should have the same keys as those contained by the PromptConfigResponse
     * </pre>
     *
     * <code>map&lt;string, string&gt; template_variables = 1 [json_name = "templateVariables"];</code>
     */

    public Builder removeTemplateVariables(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      copyOnWrite();
      instance.getMutableTemplateVariablesMap().remove(key);
      return this;
    }
    /**
     * Use {@link #getTemplateVariablesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getTemplateVariables() {
      return getTemplateVariablesMap();
    }
    /**
     * <pre>
     * The User prompt variables
     * This is a hash-map of variables that should have the same keys as those contained by the PromptConfigResponse
     * </pre>
     *
     * <code>map&lt;string, string&gt; template_variables = 1 [json_name = "templateVariables"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getTemplateVariablesMap() {
      return java.util.Collections.unmodifiableMap(
          instance.getTemplateVariablesMap());
    }
    /**
     * <pre>
     * The User prompt variables
     * This is a hash-map of variables that should have the same keys as those contained by the PromptConfigResponse
     * </pre>
     *
     * <code>map&lt;string, string&gt; template_variables = 1 [json_name = "templateVariables"];</code>
     */
    @java.lang.Override

    public /* nullable */
java.lang.String getTemplateVariablesOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, java.lang.String> map =
          instance.getTemplateVariablesMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * The User prompt variables
     * This is a hash-map of variables that should have the same keys as those contained by the PromptConfigResponse
     * </pre>
     *
     * <code>map&lt;string, string&gt; template_variables = 1 [json_name = "templateVariables"];</code>
     */
    @java.lang.Override

    public java.lang.String getTemplateVariablesOrThrow(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, java.lang.String> map =
          instance.getTemplateVariablesMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * The User prompt variables
     * This is a hash-map of variables that should have the same keys as those contained by the PromptConfigResponse
     * </pre>
     *
     * <code>map&lt;string, string&gt; template_variables = 1 [json_name = "templateVariables"];</code>
     */
    public Builder putTemplateVariables(
        java.lang.String key,
        java.lang.String value) {
      java.lang.Class<?> keyClass = key.getClass();
      java.lang.Class<?> valueClass = value.getClass();
      copyOnWrite();
      instance.getMutableTemplateVariablesMap().put(key, value);
      return this;
    }
    /**
     * <pre>
     * The User prompt variables
     * This is a hash-map of variables that should have the same keys as those contained by the PromptConfigResponse
     * </pre>
     *
     * <code>map&lt;string, string&gt; template_variables = 1 [json_name = "templateVariables"];</code>
     */
    public Builder putAllTemplateVariables(
        java.util.Map<java.lang.String, java.lang.String> values) {
      copyOnWrite();
      instance.getMutableTemplateVariablesMap().putAll(values);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:gateway.v1.PromptRequest)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.basemind.client.grpc.PromptRequest();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "templateVariables_",
            TemplateVariablesDefaultEntryHolder.defaultEntry,
          };
          java.lang.String info =
              "\u0000\u0001\u0000\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u00012";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.basemind.client.grpc.PromptRequest> parser = PARSER;
        if (parser == null) {
          synchronized (com.basemind.client.grpc.PromptRequest.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.basemind.client.grpc.PromptRequest>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:gateway.v1.PromptRequest)
  private static final com.basemind.client.grpc.PromptRequest DEFAULT_INSTANCE;
  static {
    PromptRequest defaultInstance = new PromptRequest();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      PromptRequest.class, defaultInstance);
  }

  public static com.basemind.client.grpc.PromptRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<PromptRequest> PARSER;

  public static com.google.protobuf.Parser<PromptRequest> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
