// @generated by protobuf-ts 2.9.3 with parameter generate_dependencies,long_type_string,output_javascript_es2020,server_grpc1,force_client_none
// @generated from protobuf file "cohere/v1/cohere.proto" (package "cohere.v1", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Cohere API Request parameters
 *
 * see: https://docs.cohere.com/reference/generate
 *
 * @generated from protobuf message cohere.v1.CohereModelParameters
 */
export interface CohereModelParameters {
    /**
     * Temperature Sampling: Should be a non-negative float (0-5.0) that tunes the degree of randomness in generation.
     * Lower temperatures mean less random generations.
     *
     * @generated from protobuf field: optional float temperature = 1;
     */
    temperature?: number;
    /**
     * Ensures only the top k most likely tokens are considered for generation at each step.
     * Defaults to 0, min value of 0, max value of 500.
     *
     * @generated from protobuf field: optional uint32 k = 2;
     */
    k?: number;
    /**
     * Ensures that only the most likely tokens, with total probability mass of p, are considered for generation at each step.
     * If both k and p are enabled, p acts after k.
     *
     * @generated from protobuf field: optional float p = 3;
     */
    p?: number;
    /**
     * Used to reduce repetitiveness of generated tokens. The higher the value, the stronger a penalty is applied to
     * previously present tokens, proportional to how many times they have already appeared in the
     * prompt or prior generation.
     *
     * @generated from protobuf field: optional float frequency_penalty = 4;
     */
    frequencyPenalty?: number;
    /**
     * Defaults to 0.0, min value of 0.0, max value of 1.0. Can be used to reduce repetitiveness of generated tokens.
     * Similar to frequency_penalty, except that this penalty is applied equally to all tokens that have already appeared,
     * regardless of their exact frequencies.
     *
     * @generated from protobuf field: optional float presence_penalty = 5;
     */
    presencePenalty?: number;
    /**
     * The maximum number of tokens the model will generate as part of the response.
     *
     * Note: Setting a low value may
     * result in incomplete generations. This parameter is off by default, and if it's not specified, the model will
     * continue generating until it emits an EOS completion token.
     *
     * @generated from protobuf field: optional uint32 max_tokens = 6;
     */
    maxTokens?: number;
}
/**
 *  The CoherePromptRequest contains the data that will be sent to the Cohere API.
 *
 * @generated from protobuf message cohere.v1.CoherePromptRequest
 */
export interface CoherePromptRequest {
    /**
     * Cohere Model identifier
     *
     * @generated from protobuf field: cohere.v1.CohereModel model = 1;
     */
    model: CohereModel;
    /**
     * Prompt message
     *
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * Cohere API Request parameters
     *
     * @generated from protobuf field: cohere.v1.CohereModelParameters parameters = 3;
     */
    parameters?: CohereModelParameters;
}
/**
 * The CoherePromptResponse contains the data that is returned from the Cohere API.
 *
 * @generated from protobuf message cohere.v1.CoherePromptResponse
 */
export interface CoherePromptResponse {
    /**
     * Prompt Content
     *
     * @generated from protobuf field: optional string content = 1;
     */
    content?: string;
}
/**
 * The CohereStreamResponse contains the data that is streamed from the Cohere API.
 *
 * @generated from protobuf message cohere.v1.CohereStreamResponse
 */
export interface CohereStreamResponse {
    /**
     * Prompt Content
     *
     * @generated from protobuf field: optional string content = 1;
     */
    content?: string;
    /**
     * Finish reason, if this is the last message
     *
     * @generated from protobuf field: optional string finish_reason = 2;
     */
    finishReason?: string;
}
/**
 * Type of Cohere Model
 *
 * @generated from protobuf enum cohere.v1.CohereModel
 */
export declare enum CohereModel {
    /**
     * Cohere Model is not specified
     *
     * @generated from protobuf enum value: COHERE_MODEL_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Command - the default Cohere model.
     *
     * @generated from protobuf enum value: COHERE_MODEL_COMMAND = 1;
     */
    COMMAND = 1,
    /**
     * Command Light - a faster but less accurate version of Command.
     *
     * @generated from protobuf enum value: COHERE_MODEL_COMMAND_LIGHT = 2;
     */
    COMMAND_LIGHT = 2,
    /**
     * Command Nightly - a nightly version of Command.
     *
     * @generated from protobuf enum value: COHERE_MODEL_COMMAND_NIGHTLY = 3;
     */
    COMMAND_NIGHTLY = 3,
    /**
     * Command Light Nightly - a nightly version of Command Light.
     *
     * @generated from protobuf enum value: COHERE_MODEL_COMMAND_LIGHT_NIGHTLY = 4;
     */
    COMMAND_LIGHT_NIGHTLY = 4
}
/**
 * Type of Cohere RAG Connector
 *
 * @generated from protobuf enum cohere.v1.CohereConnectorType
 */
export declare enum CohereConnectorType {
    /**
     * Cohere Connector is not specified
     *
     * @generated from protobuf enum value: COHERE_CONNECTOR_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Cohere Connector is a web search.
     *
     * @generated from protobuf enum value: COHERE_CONNECTOR_TYPE_WEB_SEARCH = 1;
     */
    WEB_SEARCH = 1,
    /**
     * Cohere Connector is a custom ID.
     *
     * @generated from protobuf enum value: COHERE_CONNECTOR_TYPE_ID = 2;
     */
    ID = 2
}
declare class CohereModelParameters$Type extends MessageType<CohereModelParameters> {
    constructor();
}
/**
 * @generated MessageType for protobuf message cohere.v1.CohereModelParameters
 */
export declare const CohereModelParameters: CohereModelParameters$Type;
declare class CoherePromptRequest$Type extends MessageType<CoherePromptRequest> {
    constructor();
}
/**
 * @generated MessageType for protobuf message cohere.v1.CoherePromptRequest
 */
export declare const CoherePromptRequest: CoherePromptRequest$Type;
declare class CoherePromptResponse$Type extends MessageType<CoherePromptResponse> {
    constructor();
}
/**
 * @generated MessageType for protobuf message cohere.v1.CoherePromptResponse
 */
export declare const CoherePromptResponse: CoherePromptResponse$Type;
declare class CohereStreamResponse$Type extends MessageType<CohereStreamResponse> {
    constructor();
}
/**
 * @generated MessageType for protobuf message cohere.v1.CohereStreamResponse
 */
export declare const CohereStreamResponse: CohereStreamResponse$Type;
/**
 * @generated ServiceType for protobuf service cohere.v1.CohereService
 */
export declare const CohereService: any;
export {};
