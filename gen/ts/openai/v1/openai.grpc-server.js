// @generated by protobuf-ts 2.9.3 with parameter generate_dependencies,long_type_string,output_javascript_es2020,server_grpc1,force_client_none
// @generated from protobuf file "openai/v1/openai.proto" (package "openai.v1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.3 with parameter generate_dependencies,long_type_string,output_javascript_es2020,server_grpc1,force_client_none
// @generated from protobuf file "openai/v1/openai.proto" (package "openai.v1", syntax proto3)
// tslint:disable
import { OpenAIStreamResponse } from "./openai";
import { OpenAIPromptResponse } from "./openai";
import { OpenAIPromptRequest } from "./openai";
/**
 * @grpc/grpc-js definition for the protobuf service openai.v1.OpenAIService.
 *
 * Usage: Implement the interface IOpenAIService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IOpenAIService = ...
 * server.addService(openAIServiceDefinition, service);
 * ```
 */
export const openAIServiceDefinition = {
    openAIPrompt: {
        path: "/openai.v1.OpenAIService/OpenAIPrompt",
        originalName: "OpenAIPrompt",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => OpenAIPromptResponse.fromBinary(bytes),
        requestDeserialize: bytes => OpenAIPromptRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(OpenAIPromptResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(OpenAIPromptRequest.toBinary(value))
    },
    openAIStream: {
        path: "/openai.v1.OpenAIService/OpenAIStream",
        originalName: "OpenAIStream",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => OpenAIStreamResponse.fromBinary(bytes),
        requestDeserialize: bytes => OpenAIPromptRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(OpenAIStreamResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(OpenAIPromptRequest.toBinary(value))
    }
};
