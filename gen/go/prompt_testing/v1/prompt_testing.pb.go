// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: prompt_testing/v1/prompt_testing.proto

package prompttesting

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request for a prompt - sending user input to the server.
type PromptTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The application ID
	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	// The project ID
	PromptConfigId *string `protobuf:"bytes,2,opt,name=prompt_config_id,json=promptConfigId,proto3,oneof" json:"prompt_config_id,omitempty"`
	// The model vendor, for example "OPEN_AI"
	ModelVendor string `protobuf:"bytes,3,opt,name=model_vendor,json=modelVendor,proto3" json:"model_vendor,omitempty"`
	// The model type to use, for example "gpt-3.5-turbo"
	ModelType string `protobuf:"bytes,4,opt,name=model_type,json=modelType,proto3" json:"model_type,omitempty"`
	// A serialized JSON object containing the model parameters
	ModelParameters []byte `protobuf:"bytes,5,opt,name=model_parameters,json=modelParameters,proto3" json:"model_parameters,omitempty"`
	// A serialized JSON array of provider message objects
	ProviderPromptMessages []byte `protobuf:"bytes,6,opt,name=provider_prompt_messages,json=providerPromptMessages,proto3" json:"provider_prompt_messages,omitempty"`
	// The User prompt variables
	// This is a hash-map of variables that should have the same keys as those contained by the PromptConfigResponse
	TemplateVariables []byte `protobuf:"bytes,7,opt,name=template_variables,json=templateVariables,proto3" json:"template_variables,omitempty"`
}

func (x *PromptTestRequest) Reset() {
	*x = PromptTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prompt_testing_v1_prompt_testing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromptTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptTestRequest) ProtoMessage() {}

func (x *PromptTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prompt_testing_v1_prompt_testing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptTestRequest.ProtoReflect.Descriptor instead.
func (*PromptTestRequest) Descriptor() ([]byte, []int) {
	return file_prompt_testing_v1_prompt_testing_proto_rawDescGZIP(), []int{0}
}

func (x *PromptTestRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *PromptTestRequest) GetPromptConfigId() string {
	if x != nil && x.PromptConfigId != nil {
		return *x.PromptConfigId
	}
	return ""
}

func (x *PromptTestRequest) GetModelVendor() string {
	if x != nil {
		return x.ModelVendor
	}
	return ""
}

func (x *PromptTestRequest) GetModelType() string {
	if x != nil {
		return x.ModelType
	}
	return ""
}

func (x *PromptTestRequest) GetModelParameters() []byte {
	if x != nil {
		return x.ModelParameters
	}
	return nil
}

func (x *PromptTestRequest) GetProviderPromptMessages() []byte {
	if x != nil {
		return x.ProviderPromptMessages
	}
	return nil
}

func (x *PromptTestRequest) GetTemplateVariables() []byte {
	if x != nil {
		return x.TemplateVariables
	}
	return nil
}

// An Streaming Prompt Response Message
type PromptTestingStreamingPromptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Prompt Content
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Finish reason, given when the stream ends
	FinishReason *string `protobuf:"bytes,2,opt,name=finish_reason,json=finishReason,proto3,oneof" json:"finish_reason,omitempty"`
	// Number of tokens used for the prompt request, given when the stream ends
	RequestTokens *uint32 `protobuf:"varint,3,opt,name=request_tokens,json=requestTokens,proto3,oneof" json:"request_tokens,omitempty"`
	// Number of tokens used for the prompt response, given when the stream ends
	ResponseTokens *uint32 `protobuf:"varint,4,opt,name=response_tokens,json=responseTokens,proto3,oneof" json:"response_tokens,omitempty"`
	// Stream duration, given when the stream ends
	StreamDuration *uint32 `protobuf:"varint,5,opt,name=stream_duration,json=streamDuration,proto3,oneof" json:"stream_duration,omitempty"`
	// An error message, if an error occurs
	ErrorMessage *string `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	// The test record ID, given when the stream ends
	PromptTestRecordId *string `protobuf:"bytes,7,opt,name=prompt_test_record_id,json=promptTestRecordId,proto3,oneof" json:"prompt_test_record_id,omitempty"`
}

func (x *PromptTestingStreamingPromptResponse) Reset() {
	*x = PromptTestingStreamingPromptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prompt_testing_v1_prompt_testing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromptTestingStreamingPromptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptTestingStreamingPromptResponse) ProtoMessage() {}

func (x *PromptTestingStreamingPromptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prompt_testing_v1_prompt_testing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptTestingStreamingPromptResponse.ProtoReflect.Descriptor instead.
func (*PromptTestingStreamingPromptResponse) Descriptor() ([]byte, []int) {
	return file_prompt_testing_v1_prompt_testing_proto_rawDescGZIP(), []int{1}
}

func (x *PromptTestingStreamingPromptResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *PromptTestingStreamingPromptResponse) GetFinishReason() string {
	if x != nil && x.FinishReason != nil {
		return *x.FinishReason
	}
	return ""
}

func (x *PromptTestingStreamingPromptResponse) GetRequestTokens() uint32 {
	if x != nil && x.RequestTokens != nil {
		return *x.RequestTokens
	}
	return 0
}

func (x *PromptTestingStreamingPromptResponse) GetResponseTokens() uint32 {
	if x != nil && x.ResponseTokens != nil {
		return *x.ResponseTokens
	}
	return 0
}

func (x *PromptTestingStreamingPromptResponse) GetStreamDuration() uint32 {
	if x != nil && x.StreamDuration != nil {
		return *x.StreamDuration
	}
	return 0
}

func (x *PromptTestingStreamingPromptResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *PromptTestingStreamingPromptResponse) GetPromptTestRecordId() string {
	if x != nil && x.PromptTestRecordId != nil {
		return *x.PromptTestRecordId
	}
	return ""
}

var File_prompt_testing_v1_prompt_testing_proto protoreflect.FileDescriptor

var file_prompt_testing_v1_prompt_testing_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x22, 0xd4, 0x02, 0x0a, 0x11,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x22, 0xcd, 0x03, 0x0a, 0x24, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x32, 0x87, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0xc1, 0x01, 0x0a,
	0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x03, 0x50, 0x01, 0x5a, 0x31,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x2d, 0x61, 0x69, 0x2f, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x65, 0x70, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x10, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prompt_testing_v1_prompt_testing_proto_rawDescOnce sync.Once
	file_prompt_testing_v1_prompt_testing_proto_rawDescData = file_prompt_testing_v1_prompt_testing_proto_rawDesc
)

func file_prompt_testing_v1_prompt_testing_proto_rawDescGZIP() []byte {
	file_prompt_testing_v1_prompt_testing_proto_rawDescOnce.Do(func() {
		file_prompt_testing_v1_prompt_testing_proto_rawDescData = protoimpl.X.CompressGZIP(file_prompt_testing_v1_prompt_testing_proto_rawDescData)
	})
	return file_prompt_testing_v1_prompt_testing_proto_rawDescData
}

var file_prompt_testing_v1_prompt_testing_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_prompt_testing_v1_prompt_testing_proto_goTypes = []interface{}{
	(*PromptTestRequest)(nil),                    // 0: prompt_testing.v1.PromptTestRequest
	(*PromptTestingStreamingPromptResponse)(nil), // 1: prompt_testing.v1.PromptTestingStreamingPromptResponse
}
var file_prompt_testing_v1_prompt_testing_proto_depIdxs = []int32{
	0, // 0: prompt_testing.v1.PromptTestingService.TestPrompt:input_type -> prompt_testing.v1.PromptTestRequest
	1, // 1: prompt_testing.v1.PromptTestingService.TestPrompt:output_type -> prompt_testing.v1.PromptTestingStreamingPromptResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_prompt_testing_v1_prompt_testing_proto_init() }
func file_prompt_testing_v1_prompt_testing_proto_init() {
	if File_prompt_testing_v1_prompt_testing_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prompt_testing_v1_prompt_testing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromptTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prompt_testing_v1_prompt_testing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromptTestingStreamingPromptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prompt_testing_v1_prompt_testing_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_prompt_testing_v1_prompt_testing_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prompt_testing_v1_prompt_testing_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prompt_testing_v1_prompt_testing_proto_goTypes,
		DependencyIndexes: file_prompt_testing_v1_prompt_testing_proto_depIdxs,
		MessageInfos:      file_prompt_testing_v1_prompt_testing_proto_msgTypes,
	}.Build()
	File_prompt_testing_v1_prompt_testing_proto = out.File
	file_prompt_testing_v1_prompt_testing_proto_rawDesc = nil
	file_prompt_testing_v1_prompt_testing_proto_goTypes = nil
	file_prompt_testing_v1_prompt_testing_proto_depIdxs = nil
}
