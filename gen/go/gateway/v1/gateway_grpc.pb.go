// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gateway/v1/gateway.proto

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	APIGatewayService_RequestPromptConfig_FullMethodName    = "/gateway.v1.APIGatewayService/RequestPromptConfig"
	APIGatewayService_RequestPrompt_FullMethodName          = "/gateway.v1.APIGatewayService/RequestPrompt"
	APIGatewayService_RequestStreamingPrompt_FullMethodName = "/gateway.v1.APIGatewayService/RequestStreamingPrompt"
)

// APIGatewayServiceClient is the client API for APIGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIGatewayServiceClient interface {
	// Request the configuration for making prompt requests
	RequestPromptConfig(ctx context.Context, in *PromptConfigRequest, opts ...grpc.CallOption) (*PromptConfigResponse, error)
	// Request a regular LLM prompt
	RequestPrompt(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*PromptResponse, error)
	// Request a streaming LLM prompt
	RequestStreamingPrompt(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (APIGatewayService_RequestStreamingPromptClient, error)
}

type aPIGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIGatewayServiceClient(cc grpc.ClientConnInterface) APIGatewayServiceClient {
	return &aPIGatewayServiceClient{cc}
}

func (c *aPIGatewayServiceClient) RequestPromptConfig(ctx context.Context, in *PromptConfigRequest, opts ...grpc.CallOption) (*PromptConfigResponse, error) {
	out := new(PromptConfigResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_RequestPromptConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) RequestPrompt(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*PromptResponse, error) {
	out := new(PromptResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_RequestPrompt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) RequestStreamingPrompt(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (APIGatewayService_RequestStreamingPromptClient, error) {
	stream, err := c.cc.NewStream(ctx, &APIGatewayService_ServiceDesc.Streams[0], APIGatewayService_RequestStreamingPrompt_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGatewayServiceRequestStreamingPromptClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIGatewayService_RequestStreamingPromptClient interface {
	Recv() (*StreamingPromptResponse, error)
	grpc.ClientStream
}

type aPIGatewayServiceRequestStreamingPromptClient struct {
	grpc.ClientStream
}

func (x *aPIGatewayServiceRequestStreamingPromptClient) Recv() (*StreamingPromptResponse, error) {
	m := new(StreamingPromptResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIGatewayServiceServer is the server API for APIGatewayService service.
// All implementations must embed UnimplementedAPIGatewayServiceServer
// for forward compatibility
type APIGatewayServiceServer interface {
	// Request the configuration for making prompt requests
	RequestPromptConfig(context.Context, *PromptConfigRequest) (*PromptConfigResponse, error)
	// Request a regular LLM prompt
	RequestPrompt(context.Context, *PromptRequest) (*PromptResponse, error)
	// Request a streaming LLM prompt
	RequestStreamingPrompt(*PromptRequest, APIGatewayService_RequestStreamingPromptServer) error
	mustEmbedUnimplementedAPIGatewayServiceServer()
}

// UnimplementedAPIGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPIGatewayServiceServer struct {
}

func (UnimplementedAPIGatewayServiceServer) RequestPromptConfig(context.Context, *PromptConfigRequest) (*PromptConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPromptConfig not implemented")
}
func (UnimplementedAPIGatewayServiceServer) RequestPrompt(context.Context, *PromptRequest) (*PromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPrompt not implemented")
}
func (UnimplementedAPIGatewayServiceServer) RequestStreamingPrompt(*PromptRequest, APIGatewayService_RequestStreamingPromptServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestStreamingPrompt not implemented")
}
func (UnimplementedAPIGatewayServiceServer) mustEmbedUnimplementedAPIGatewayServiceServer() {}

// UnsafeAPIGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIGatewayServiceServer will
// result in compilation errors.
type UnsafeAPIGatewayServiceServer interface {
	mustEmbedUnimplementedAPIGatewayServiceServer()
}

func RegisterAPIGatewayServiceServer(s grpc.ServiceRegistrar, srv APIGatewayServiceServer) {
	s.RegisterService(&APIGatewayService_ServiceDesc, srv)
}

func _APIGatewayService_RequestPromptConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).RequestPromptConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_RequestPromptConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).RequestPromptConfig(ctx, req.(*PromptConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_RequestPrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).RequestPrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_RequestPrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).RequestPrompt(ctx, req.(*PromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_RequestStreamingPrompt_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PromptRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIGatewayServiceServer).RequestStreamingPrompt(m, &aPIGatewayServiceRequestStreamingPromptServer{stream})
}

type APIGatewayService_RequestStreamingPromptServer interface {
	Send(*StreamingPromptResponse) error
	grpc.ServerStream
}

type aPIGatewayServiceRequestStreamingPromptServer struct {
	grpc.ServerStream
}

func (x *aPIGatewayServiceRequestStreamingPromptServer) Send(m *StreamingPromptResponse) error {
	return x.ServerStream.SendMsg(m)
}

// APIGatewayService_ServiceDesc is the grpc.ServiceDesc for APIGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.v1.APIGatewayService",
	HandlerType: (*APIGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestPromptConfig",
			Handler:    _APIGatewayService_RequestPromptConfig_Handler,
		},
		{
			MethodName: "RequestPrompt",
			Handler:    _APIGatewayService_RequestPrompt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestStreamingPrompt",
			Handler:       _APIGatewayService_RequestStreamingPrompt_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gateway/v1/gateway.proto",
}
