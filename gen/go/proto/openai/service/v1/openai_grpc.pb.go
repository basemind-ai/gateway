// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/openai/service/v1/openai.proto

// buf:lint:ignore PACKAGE_DIRECTORY_MATCH

package openaiconnectorgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OpenAIService_OpenAIPrompt_FullMethodName = "/openai.service.v1.OpenAIService/OpenAIPrompt"
	OpenAIService_OpenAIStream_FullMethodName = "/openai.service.v1.OpenAIService/OpenAIStream"
)

// OpenAIServiceClient is the client API for OpenAIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenAIServiceClient interface {
	// Request a regular LLM prompt
	OpenAIPrompt(ctx context.Context, in *OpenAIPromptRequest, opts ...grpc.CallOption) (*OpenAIPromptResponse, error)
	// Request a streaming LLM prompt
	OpenAIStream(ctx context.Context, in *OpenAIPromptRequest, opts ...grpc.CallOption) (OpenAIService_OpenAIStreamClient, error)
}

type openAIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenAIServiceClient(cc grpc.ClientConnInterface) OpenAIServiceClient {
	return &openAIServiceClient{cc}
}

func (c *openAIServiceClient) OpenAIPrompt(ctx context.Context, in *OpenAIPromptRequest, opts ...grpc.CallOption) (*OpenAIPromptResponse, error) {
	out := new(OpenAIPromptResponse)
	err := c.cc.Invoke(ctx, OpenAIService_OpenAIPrompt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAIServiceClient) OpenAIStream(ctx context.Context, in *OpenAIPromptRequest, opts ...grpc.CallOption) (OpenAIService_OpenAIStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &OpenAIService_ServiceDesc.Streams[0], OpenAIService_OpenAIStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &openAIServiceOpenAIStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpenAIService_OpenAIStreamClient interface {
	Recv() (*OpenAIStreamResponse, error)
	grpc.ClientStream
}

type openAIServiceOpenAIStreamClient struct {
	grpc.ClientStream
}

func (x *openAIServiceOpenAIStreamClient) Recv() (*OpenAIStreamResponse, error) {
	m := new(OpenAIStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpenAIServiceServer is the server API for OpenAIService service.
// All implementations must embed UnimplementedOpenAIServiceServer
// for forward compatibility
type OpenAIServiceServer interface {
	// Request a regular LLM prompt
	OpenAIPrompt(context.Context, *OpenAIPromptRequest) (*OpenAIPromptResponse, error)
	// Request a streaming LLM prompt
	OpenAIStream(*OpenAIPromptRequest, OpenAIService_OpenAIStreamServer) error
	mustEmbedUnimplementedOpenAIServiceServer()
}

// UnimplementedOpenAIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOpenAIServiceServer struct {
}

func (UnimplementedOpenAIServiceServer) OpenAIPrompt(context.Context, *OpenAIPromptRequest) (*OpenAIPromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenAIPrompt not implemented")
}
func (UnimplementedOpenAIServiceServer) OpenAIStream(*OpenAIPromptRequest, OpenAIService_OpenAIStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenAIStream not implemented")
}
func (UnimplementedOpenAIServiceServer) mustEmbedUnimplementedOpenAIServiceServer() {}

// UnsafeOpenAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenAIServiceServer will
// result in compilation errors.
type UnsafeOpenAIServiceServer interface {
	mustEmbedUnimplementedOpenAIServiceServer()
}

func RegisterOpenAIServiceServer(s grpc.ServiceRegistrar, srv OpenAIServiceServer) {
	s.RegisterService(&OpenAIService_ServiceDesc, srv)
}

func _OpenAIService_OpenAIPrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenAIPromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAIServiceServer).OpenAIPrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenAIService_OpenAIPrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAIServiceServer).OpenAIPrompt(ctx, req.(*OpenAIPromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAIService_OpenAIStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OpenAIPromptRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenAIServiceServer).OpenAIStream(m, &openAIServiceOpenAIStreamServer{stream})
}

type OpenAIService_OpenAIStreamServer interface {
	Send(*OpenAIStreamResponse) error
	grpc.ServerStream
}

type openAIServiceOpenAIStreamServer struct {
	grpc.ServerStream
}

func (x *openAIServiceOpenAIStreamServer) Send(m *OpenAIStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// OpenAIService_ServiceDesc is the grpc.ServiceDesc for OpenAIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenAIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openai.service.v1.OpenAIService",
	HandlerType: (*OpenAIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenAIPrompt",
			Handler:    _OpenAIService_OpenAIPrompt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenAIStream",
			Handler:       _OpenAIService_OpenAIStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/openai/service/v1/openai.proto",
}
