// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ptesting/v1/ptesting.proto

package ptesting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PromptTestingService_TestPrompt_FullMethodName = "/ptesting.v1.PromptTestingService/TestPrompt"
)

// PromptTestingServiceClient is the client API for PromptTestingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromptTestingServiceClient interface {
	// Request a streaming LLM prompt
	TestPrompt(ctx context.Context, in *PromptTestRequest, opts ...grpc.CallOption) (PromptTestingService_TestPromptClient, error)
}

type promptTestingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPromptTestingServiceClient(cc grpc.ClientConnInterface) PromptTestingServiceClient {
	return &promptTestingServiceClient{cc}
}

func (c *promptTestingServiceClient) TestPrompt(ctx context.Context, in *PromptTestRequest, opts ...grpc.CallOption) (PromptTestingService_TestPromptClient, error) {
	stream, err := c.cc.NewStream(ctx, &PromptTestingService_ServiceDesc.Streams[0], PromptTestingService_TestPrompt_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &promptTestingServiceTestPromptClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PromptTestingService_TestPromptClient interface {
	Recv() (*PromptTestingStreamingPromptResponse, error)
	grpc.ClientStream
}

type promptTestingServiceTestPromptClient struct {
	grpc.ClientStream
}

func (x *promptTestingServiceTestPromptClient) Recv() (*PromptTestingStreamingPromptResponse, error) {
	m := new(PromptTestingStreamingPromptResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PromptTestingServiceServer is the server API for PromptTestingService service.
// All implementations must embed UnimplementedPromptTestingServiceServer
// for forward compatibility
type PromptTestingServiceServer interface {
	// Request a streaming LLM prompt
	TestPrompt(*PromptTestRequest, PromptTestingService_TestPromptServer) error
	mustEmbedUnimplementedPromptTestingServiceServer()
}

// UnimplementedPromptTestingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPromptTestingServiceServer struct {
}

func (UnimplementedPromptTestingServiceServer) TestPrompt(*PromptTestRequest, PromptTestingService_TestPromptServer) error {
	return status.Errorf(codes.Unimplemented, "method TestPrompt not implemented")
}
func (UnimplementedPromptTestingServiceServer) mustEmbedUnimplementedPromptTestingServiceServer() {}

// UnsafePromptTestingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromptTestingServiceServer will
// result in compilation errors.
type UnsafePromptTestingServiceServer interface {
	mustEmbedUnimplementedPromptTestingServiceServer()
}

func RegisterPromptTestingServiceServer(s grpc.ServiceRegistrar, srv PromptTestingServiceServer) {
	s.RegisterService(&PromptTestingService_ServiceDesc, srv)
}

func _PromptTestingService_TestPrompt_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PromptTestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PromptTestingServiceServer).TestPrompt(m, &promptTestingServiceTestPromptServer{stream})
}

type PromptTestingService_TestPromptServer interface {
	Send(*PromptTestingStreamingPromptResponse) error
	grpc.ServerStream
}

type promptTestingServiceTestPromptServer struct {
	grpc.ServerStream
}

func (x *promptTestingServiceTestPromptServer) Send(m *PromptTestingStreamingPromptResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PromptTestingService_ServiceDesc is the grpc.ServiceDesc for PromptTestingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PromptTestingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ptesting.v1.PromptTestingService",
	HandlerType: (*PromptTestingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestPrompt",
			Handler:       _PromptTestingService_TestPrompt_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ptesting/v1/ptesting.proto",
}
