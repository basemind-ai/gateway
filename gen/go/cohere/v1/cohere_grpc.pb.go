// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cohere/v1/cohere.proto

package cohereconnector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CohereService_CoherePrompt_FullMethodName = "/cohere.v1.CohereService/CoherePrompt"
	CohereService_CohereStream_FullMethodName = "/cohere.v1.CohereService/CohereStream"
)

// CohereServiceClient is the client API for CohereService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CohereServiceClient interface {
	// Request a regular LLM prompt
	CoherePrompt(ctx context.Context, in *CoherePromptRequest, opts ...grpc.CallOption) (*CoherePromptResponse, error)
	// Request a streaming LLM prompt
	CohereStream(ctx context.Context, in *CoherePromptRequest, opts ...grpc.CallOption) (CohereService_CohereStreamClient, error)
}

type cohereServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCohereServiceClient(cc grpc.ClientConnInterface) CohereServiceClient {
	return &cohereServiceClient{cc}
}

func (c *cohereServiceClient) CoherePrompt(ctx context.Context, in *CoherePromptRequest, opts ...grpc.CallOption) (*CoherePromptResponse, error) {
	out := new(CoherePromptResponse)
	err := c.cc.Invoke(ctx, CohereService_CoherePrompt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cohereServiceClient) CohereStream(ctx context.Context, in *CoherePromptRequest, opts ...grpc.CallOption) (CohereService_CohereStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CohereService_ServiceDesc.Streams[0], CohereService_CohereStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cohereServiceCohereStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CohereService_CohereStreamClient interface {
	Recv() (*CohereStreamResponse, error)
	grpc.ClientStream
}

type cohereServiceCohereStreamClient struct {
	grpc.ClientStream
}

func (x *cohereServiceCohereStreamClient) Recv() (*CohereStreamResponse, error) {
	m := new(CohereStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CohereServiceServer is the server API for CohereService service.
// All implementations must embed UnimplementedCohereServiceServer
// for forward compatibility
type CohereServiceServer interface {
	// Request a regular LLM prompt
	CoherePrompt(context.Context, *CoherePromptRequest) (*CoherePromptResponse, error)
	// Request a streaming LLM prompt
	CohereStream(*CoherePromptRequest, CohereService_CohereStreamServer) error
	mustEmbedUnimplementedCohereServiceServer()
}

// UnimplementedCohereServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCohereServiceServer struct {
}

func (UnimplementedCohereServiceServer) CoherePrompt(context.Context, *CoherePromptRequest) (*CoherePromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoherePrompt not implemented")
}
func (UnimplementedCohereServiceServer) CohereStream(*CoherePromptRequest, CohereService_CohereStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CohereStream not implemented")
}
func (UnimplementedCohereServiceServer) mustEmbedUnimplementedCohereServiceServer() {}

// UnsafeCohereServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CohereServiceServer will
// result in compilation errors.
type UnsafeCohereServiceServer interface {
	mustEmbedUnimplementedCohereServiceServer()
}

func RegisterCohereServiceServer(s grpc.ServiceRegistrar, srv CohereServiceServer) {
	s.RegisterService(&CohereService_ServiceDesc, srv)
}

func _CohereService_CoherePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoherePromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CohereServiceServer).CoherePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CohereService_CoherePrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CohereServiceServer).CoherePrompt(ctx, req.(*CoherePromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CohereService_CohereStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CoherePromptRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CohereServiceServer).CohereStream(m, &cohereServiceCohereStreamServer{stream})
}

type CohereService_CohereStreamServer interface {
	Send(*CohereStreamResponse) error
	grpc.ServerStream
}

type cohereServiceCohereStreamServer struct {
	grpc.ServerStream
}

func (x *cohereServiceCohereStreamServer) Send(m *CohereStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CohereService_ServiceDesc is the grpc.ServiceDesc for CohereService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CohereService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cohere.v1.CohereService",
	HandlerType: (*CohereServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CoherePrompt",
			Handler:    _CohereService_CoherePrompt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CohereStream",
			Handler:       _CohereService_CohereStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cohere/v1/cohere.proto",
}
