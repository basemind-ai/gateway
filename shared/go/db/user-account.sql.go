// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user-account.sql

package db

import (
	"context"
)

const checkUserAccountExists = `-- name: CheckUserAccountExists :one

SELECT EXISTS(SELECT 1 FROM user_account WHERE firebase_id = $1)
`

// -- user_account
func (q *Queries) CheckUserAccountExists(ctx context.Context, firebaseID string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserAccountExists, firebaseID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO user_account (firebase_id)
VALUES ($1)
RETURNING id, firebase_id, created_at
`

func (q *Queries) CreateUserAccount(ctx context.Context, firebaseID string) (UserAccount, error) {
	row := q.db.QueryRow(ctx, createUserAccount, firebaseID)
	var i UserAccount
	err := row.Scan(&i.ID, &i.FirebaseID, &i.CreatedAt)
	return i, err
}

const retrieveUserAccount = `-- name: RetrieveUserAccount :one
SELECT
    id,
    firebase_id,
    created_at
FROM user_account
WHERE firebase_id = $1
`

func (q *Queries) RetrieveUserAccount(ctx context.Context, firebaseID string) (UserAccount, error) {
	row := q.db.QueryRow(ctx, retrieveUserAccount, firebaseID)
	var i UserAccount
	err := row.Scan(&i.ID, &i.FirebaseID, &i.CreatedAt)
	return i, err
}
