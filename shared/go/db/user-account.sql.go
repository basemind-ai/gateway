// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user-account.sql

package db

import (
	"context"
)

const checkUserAccountExists = `-- name: CheckUserAccountExists :one

SELECT EXISTS(SELECT 1 FROM user_account WHERE firebase_id = $1)
`

// -- user_account
func (q *Queries) CheckUserAccountExists(ctx context.Context, firebaseID string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserAccountExists, firebaseID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO user_account (
    display_name,
    email,
    firebase_id,
    phone_number,
    photo_url
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, display_name, email, firebase_id, phone_number, photo_url, created_at
`

type CreateUserAccountParams struct {
	DisplayName string `json:"displayName"`
	Email       string `json:"email"`
	FirebaseID  string `json:"firebaseId"`
	PhoneNumber string `json:"phoneNumber"`
	PhotoUrl    string `json:"photoUrl"`
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (UserAccount, error) {
	row := q.db.QueryRow(ctx, createUserAccount,
		arg.DisplayName,
		arg.Email,
		arg.FirebaseID,
		arg.PhoneNumber,
		arg.PhotoUrl,
	)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Email,
		&i.FirebaseID,
		&i.PhoneNumber,
		&i.PhotoUrl,
		&i.CreatedAt,
	)
	return i, err
}

const retrieveUserAccount = `-- name: RetrieveUserAccount :one
SELECT
    id,
    display_name,
    email,
    firebase_id,
    phone_number,
    photo_url,
    created_at
FROM user_account
WHERE firebase_id = $1
`

func (q *Queries) RetrieveUserAccount(ctx context.Context, firebaseID string) (UserAccount, error) {
	row := q.db.QueryRow(ctx, retrieveUserAccount, firebaseID)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Email,
		&i.FirebaseID,
		&i.PhoneNumber,
		&i.PhotoUrl,
		&i.CreatedAt,
	)
	return i, err
}
