// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: application.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createApplication = `-- name: CreateApplication :one

INSERT INTO application (
    project_id,
    name,
    description
)
VALUES ($1, $2, $3)
RETURNING id, description, name, created_at, updated_at, deleted_at, project_id
`

type CreateApplicationParams struct {
	ProjectID   pgtype.UUID `json:"projectId"`
	Name        string      `json:"name"`
	Description string      `json:"description"`
}

// -- application
func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.db.QueryRow(ctx, createApplication, arg.ProjectID, arg.Name, arg.Description)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ProjectID,
	)
	return i, err
}

const deleteApplication = `-- name: DeleteApplication :exec
UPDATE application
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteApplication(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteApplication, id)
	return err
}

const retrieveApplication = `-- name: RetrieveApplication :one
SELECT
    id,
    description,
    name,
    created_at,
    updated_at,
    project_id
FROM application
WHERE
    id = $1
    AND deleted_at IS NULL
`

type RetrieveApplicationRow struct {
	ID          pgtype.UUID        `json:"id"`
	Description string             `json:"description"`
	Name        string             `json:"name"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt   pgtype.Timestamptz `json:"updatedAt"`
	ProjectID   pgtype.UUID        `json:"projectId"`
}

func (q *Queries) RetrieveApplication(ctx context.Context, id pgtype.UUID) (RetrieveApplicationRow, error) {
	row := q.db.QueryRow(ctx, retrieveApplication, id)
	var i RetrieveApplicationRow
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectID,
	)
	return i, err
}

const retrieveApplications = `-- name: RetrieveApplications :many
SELECT
    id,
    description,
    name,
    created_at,
    updated_at,
    project_id
FROM application
WHERE
    project_id = $1
    AND deleted_at IS NULL
`

type RetrieveApplicationsRow struct {
	ID          pgtype.UUID        `json:"id"`
	Description string             `json:"description"`
	Name        string             `json:"name"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt   pgtype.Timestamptz `json:"updatedAt"`
	ProjectID   pgtype.UUID        `json:"projectId"`
}

func (q *Queries) RetrieveApplications(ctx context.Context, projectID pgtype.UUID) ([]RetrieveApplicationsRow, error) {
	rows, err := q.db.Query(ctx, retrieveApplications, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RetrieveApplicationsRow
	for rows.Next() {
		var i RetrieveApplicationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProjectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplication = `-- name: UpdateApplication :one
UPDATE application
SET
    name = $2,
    description = $3,
    updated_at = NOW()
WHERE
    id = $1
    AND deleted_at IS NULL
RETURNING id, description, name, created_at, updated_at, deleted_at, project_id
`

type UpdateApplicationParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description string      `json:"description"`
}

func (q *Queries) UpdateApplication(ctx context.Context, arg UpdateApplicationParams) (Application, error) {
	row := q.db.QueryRow(ctx, updateApplication, arg.ID, arg.Name, arg.Description)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ProjectID,
	)
	return i, err
}
