// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: prompt-request-record.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPromptRequestRecord = `-- name: CreatePromptRequestRecord :one

INSERT INTO prompt_request_record (
    is_stream_response,
    request_tokens,
    response_tokens,
    request_tokens_cost,
    response_tokens_cost,
    start_time,
    finish_time,
    duration_ms,
    prompt_config_id,
    provider_model_pricing_id,
    error_log,
    finish_reason
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, is_stream_response, request_tokens, response_tokens, request_tokens_cost, response_tokens_cost, start_time, finish_time, finish_reason, duration_ms, prompt_config_id, error_log, created_at, deleted_at, provider_model_pricing_id
`

type CreatePromptRequestRecordParams struct {
	IsStreamResponse       bool               `json:"isStreamResponse"`
	RequestTokens          int32              `json:"requestTokens"`
	ResponseTokens         int32              `json:"responseTokens"`
	RequestTokensCost      pgtype.Numeric     `json:"requestTokensCost"`
	ResponseTokensCost     pgtype.Numeric     `json:"responseTokensCost"`
	StartTime              pgtype.Timestamptz `json:"startTime"`
	FinishTime             pgtype.Timestamptz `json:"finishTime"`
	DurationMs             pgtype.Int4        `json:"durationMs"`
	PromptConfigID         pgtype.UUID        `json:"promptConfigId"`
	ProviderModelPricingID pgtype.UUID        `json:"providerModelPricingId"`
	ErrorLog               pgtype.Text        `json:"errorLog"`
	FinishReason           PromptFinishReason `json:"finishReason"`
}

// -- prompt request record
func (q *Queries) CreatePromptRequestRecord(ctx context.Context, arg CreatePromptRequestRecordParams) (PromptRequestRecord, error) {
	row := q.db.QueryRow(ctx, createPromptRequestRecord,
		arg.IsStreamResponse,
		arg.RequestTokens,
		arg.ResponseTokens,
		arg.RequestTokensCost,
		arg.ResponseTokensCost,
		arg.StartTime,
		arg.FinishTime,
		arg.DurationMs,
		arg.PromptConfigID,
		arg.ProviderModelPricingID,
		arg.ErrorLog,
		arg.FinishReason,
	)
	var i PromptRequestRecord
	err := row.Scan(
		&i.ID,
		&i.IsStreamResponse,
		&i.RequestTokens,
		&i.ResponseTokens,
		&i.RequestTokensCost,
		&i.ResponseTokensCost,
		&i.StartTime,
		&i.FinishTime,
		&i.FinishReason,
		&i.DurationMs,
		&i.PromptConfigID,
		&i.ErrorLog,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.ProviderModelPricingID,
	)
	return i, err
}
