// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: provider-key.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProviderKey = `-- name: CreateProviderKey :one

INSERT INTO provider_key (model_vendor, api_key, project_id)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateProviderKeyParams struct {
	ModelVendor ModelVendor `json:"modelVendor"`
	ApiKey      string      `json:"apiKey"`
	ProjectID   pgtype.UUID `json:"projectId"`
}

// -- provider key
func (q *Queries) CreateProviderKey(ctx context.Context, arg CreateProviderKeyParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createProviderKey, arg.ModelVendor, arg.ApiKey, arg.ProjectID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteProviderKey = `-- name: DeleteProviderKey :exec
DELETE FROM provider_key WHERE id = $1
`

func (q *Queries) DeleteProviderKey(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProviderKey, id)
	return err
}

const retrieveProviderKey = `-- name: RetrieveProviderKey :one
SELECT id, model_vendor, api_key FROM provider_key WHERE project_id = $1 AND model_vendor = $2
`

type RetrieveProviderKeyParams struct {
	ProjectID   pgtype.UUID `json:"projectId"`
	ModelVendor ModelVendor `json:"modelVendor"`
}

type RetrieveProviderKeyRow struct {
	ID          pgtype.UUID `json:"id"`
	ModelVendor ModelVendor `json:"modelVendor"`
	ApiKey      string      `json:"apiKey"`
}

func (q *Queries) RetrieveProviderKey(ctx context.Context, arg RetrieveProviderKeyParams) (RetrieveProviderKeyRow, error) {
	row := q.db.QueryRow(ctx, retrieveProviderKey, arg.ProjectID, arg.ModelVendor)
	var i RetrieveProviderKeyRow
	err := row.Scan(&i.ID, &i.ModelVendor, &i.ApiKey)
	return i, err
}
