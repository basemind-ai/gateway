// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: provider-key.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkProviderKeyExists = `-- name: CheckProviderKeyExists :one
SELECT EXISTS(SELECT 1 FROM provider_key WHERE id = $1)
`

func (q *Queries) CheckProviderKeyExists(ctx context.Context, id pgtype.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, checkProviderKeyExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createProviderKey = `-- name: CreateProviderKey :one

INSERT INTO provider_key (model_vendor, encrypted_api_key, project_id)
VALUES ($1, $2, $3)
RETURNING id, model_vendor, encrypted_api_key, created_at, project_id
`

type CreateProviderKeyParams struct {
	ModelVendor     ModelVendor `json:"modelVendor"`
	EncryptedApiKey string      `json:"encryptedApiKey"`
	ProjectID       pgtype.UUID `json:"projectId"`
}

// -- provider key
func (q *Queries) CreateProviderKey(ctx context.Context, arg CreateProviderKeyParams) (ProviderKey, error) {
	row := q.db.QueryRow(ctx, createProviderKey, arg.ModelVendor, arg.EncryptedApiKey, arg.ProjectID)
	var i ProviderKey
	err := row.Scan(
		&i.ID,
		&i.ModelVendor,
		&i.EncryptedApiKey,
		&i.CreatedAt,
		&i.ProjectID,
	)
	return i, err
}

const deleteProviderKey = `-- name: DeleteProviderKey :exec
DELETE FROM provider_key WHERE id = $1
`

func (q *Queries) DeleteProviderKey(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProviderKey, id)
	return err
}

const retrieveProjectProviderKeys = `-- name: RetrieveProjectProviderKeys :many
SELECT
    id,
    model_vendor,
    created_at
FROM provider_key WHERE project_id = $1
`

type RetrieveProjectProviderKeysRow struct {
	ID          pgtype.UUID        `json:"id"`
	ModelVendor ModelVendor        `json:"modelVendor"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
}

func (q *Queries) RetrieveProjectProviderKeys(ctx context.Context, projectID pgtype.UUID) ([]RetrieveProjectProviderKeysRow, error) {
	rows, err := q.db.Query(ctx, retrieveProjectProviderKeys, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RetrieveProjectProviderKeysRow
	for rows.Next() {
		var i RetrieveProjectProviderKeysRow
		if err := rows.Scan(&i.ID, &i.ModelVendor, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const retrieveProviderKey = `-- name: RetrieveProviderKey :one
SELECT
    id,
    model_vendor,
    encrypted_api_key
FROM provider_key WHERE project_id = $1 AND model_vendor = $2
`

type RetrieveProviderKeyParams struct {
	ProjectID   pgtype.UUID `json:"projectId"`
	ModelVendor ModelVendor `json:"modelVendor"`
}

type RetrieveProviderKeyRow struct {
	ID              pgtype.UUID `json:"id"`
	ModelVendor     ModelVendor `json:"modelVendor"`
	EncryptedApiKey string      `json:"encryptedApiKey"`
}

func (q *Queries) RetrieveProviderKey(ctx context.Context, arg RetrieveProviderKeyParams) (RetrieveProviderKeyRow, error) {
	row := q.db.QueryRow(ctx, retrieveProviderKey, arg.ProjectID, arg.ModelVendor)
	var i RetrieveProviderKeyRow
	err := row.Scan(&i.ID, &i.ModelVendor, &i.EncryptedApiKey)
	return i, err
}
