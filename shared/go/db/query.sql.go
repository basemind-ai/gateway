// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT EXISTS(SELECT 1 FROM "user" WHERE firebase_id = $1)
`

func (q *Queries) CheckUserExists(ctx context.Context, firebaseID string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExists, firebaseID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createApplication = `-- name: CreateApplication :one
INSERT INTO application (
    project_id,
    name,
    description,
    model_type,
    model_vendor,
    model_parameters,
    prompt_messages,
    expected_template_variables
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, description, model_parameters, model_type, model_vendor, name, prompt_messages, expected_template_variables, created_at, updated_at, project_id
`

type CreateApplicationParams struct {
	ProjectID                 pgtype.UUID `json:"project_id"`
	Name                      string      `json:"name"`
	Description     string      `json:"description"`
	ModelType       ModelType   `json:"model_type"`
	ModelVendor     ModelVendor `json:"model_vendor"`
	ModelParameters []byte      `json:"model_parameters"`
	PromptMessages            []byte      `json:"prompt_messages"`
	ExpectedTemplateVariables []string    `json:"expected_template_variables"`
}

func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.db.QueryRow(ctx, createApplication,
		arg.ProjectID,
		arg.Name,
		arg.Description,
		arg.ModelType,
		arg.ModelVendor,
		arg.ModelParameters,
		arg.PromptMessages,
		arg.ExpectedTemplateVariables,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ModelParameters,
		&i.ModelType,
		&i.ModelVendor,
		&i.Name,
		&i.PromptMessages,
		&i.ExpectedTemplateVariables,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectID,
	)
	return i, err
}

const createProject = `-- name: CreateProject :one
INSERT INTO project (name, description)
VALUES ($1, $2)
RETURNING id, name, description, created_at
`

type CreateProjectParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.Name, arg.Description)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (firebase_id)
VALUES ($1)
RETURNING id, firebase_id, created_at
`

func (q *Queries) CreateUser(ctx context.Context, firebaseID string) (User, error) {
	row := q.db.QueryRow(ctx, createUser, firebaseID)
	var i User
	err := row.Scan(&i.ID, &i.FirebaseID, &i.CreatedAt)
	return i, err
}

const createUserProject = `-- name: CreateUserProject :one
INSERT INTO user_project (
    user_id, project_id, permission, is_user_default_project
)
VALUES ($1, $2, $3, $4)
RETURNING user_id, project_id, permission, is_user_default_project
`

type CreateUserProjectParams struct {
	UserID               pgtype.UUID          `json:"user_id"`
	ProjectID            pgtype.UUID          `json:"project_id"`
	Permission           AccessPermissionType `json:"permission"`
	IsUserDefaultProject bool                 `json:"is_user_default_project"`
}

func (q *Queries) CreateUserProject(ctx context.Context, arg CreateUserProjectParams) (UserProject, error) {
	row := q.db.QueryRow(ctx, createUserProject,
		arg.UserID,
		arg.ProjectID,
		arg.Permission,
		arg.IsUserDefaultProject,
	)
	var i UserProject
	err := row.Scan(
		&i.UserID,
		&i.ProjectID,
		&i.Permission,
		&i.IsUserDefaultProject,
	)
	return i, err
}

const deleteApplication = `-- name: DeleteApplication :exec
DELETE FROM application
WHERE id = $1
`

func (q *Queries) DeleteApplication(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteApplication, id)
	return err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE
FROM "project"
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM "user"
WHERE firebase_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, firebaseID string) error {
	_, err := q.db.Exec(ctx, deleteUser, firebaseID)
	return err
}

const deleteUserProject = `-- name: DeleteUserProject :exec
DELETE
FROM "user_project"
WHERE project_id = $1
`

func (q *Queries) DeleteUserProject(ctx context.Context, projectID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserProject, projectID)
	return err
}

const findApplicationById = `-- name: FindApplicationById :one
SELECT id, description, model_parameters, model_type, model_vendor, name, prompt_messages, expected_template_variables, created_at, updated_at, project_id -- noqa: L044
FROM application
WHERE id = $1
`

func (q *Queries) FindApplicationById(ctx context.Context, id pgtype.UUID) (Application, error) {
	row := q.db.QueryRow(ctx, findApplicationById, id)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ModelParameters,
		&i.ModelType,
		&i.ModelVendor,
		&i.Name,
		&i.PromptMessages,
		&i.ExpectedTemplateVariables,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectID,
	)
	return i, err
}

const findProjectsByUserId = `-- name: FindProjectsByUserId :many
SELECT
    p.created_at,
    p.description,
    p.id,
    p.name,
    up.is_user_default_project,
    up.permission
FROM project AS p
INNER JOIN user_project AS up ON p.id = up.project_id
WHERE up.user_id = $1
`

type FindProjectsByUserIdRow struct {
	CreatedAt            pgtype.Timestamptz   `json:"created_at"`
	Description          string               `json:"description"`
	ID                   pgtype.UUID          `json:"id"`
	Name                 string               `json:"name"`
	IsUserDefaultProject bool                 `json:"is_user_default_project"`
	Permission           AccessPermissionType `json:"permission"`
}

func (q *Queries) FindProjectsByUserId(ctx context.Context, userID pgtype.UUID) ([]FindProjectsByUserIdRow, error) {
	rows, err := q.db.Query(ctx, findProjectsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindProjectsByUserIdRow
	for rows.Next() {
		var i FindProjectsByUserIdRow
		if err := rows.Scan(
			&i.CreatedAt,
			&i.Description,
			&i.ID,
			&i.Name,
			&i.IsUserDefaultProject,
			&i.Permission,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByFirebaseId = `-- name: FindUserByFirebaseId :one
SELECT
    id,
    firebase_id,
    created_at
FROM "user"
WHERE firebase_id = $1
`

func (q *Queries) FindUserByFirebaseId(ctx context.Context, firebaseID string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByFirebaseId, firebaseID)
	var i User
	err := row.Scan(&i.ID, &i.FirebaseID, &i.CreatedAt)
	return i, err
}

const updateApplication = `-- name: UpdateApplication :one
UPDATE application
SET
    name = $2,
    description = $3,
    model_type = $4,
    model_vendor = $5,
    model_parameters = $6,
    prompt_messages = $7,
    expected_template_variables = $8
WHERE id = $1 RETURNING id, description, model_parameters, model_type, model_vendor, name, prompt_messages, expected_template_variables, created_at, updated_at, project_id
`

type UpdateApplicationParams struct {
	ID                        pgtype.UUID `json:"id"`
	Name                      string      `json:"name"`
	Description     string      `json:"description"`
	ModelType       ModelType   `json:"model_type"`
	ModelVendor     ModelVendor `json:"model_vendor"`
	ModelParameters []byte      `json:"model_parameters"`
	PromptMessages            []byte      `json:"prompt_messages"`
	ExpectedTemplateVariables []string    `json:"expected_template_variables"`
}

func (q *Queries) UpdateApplication(ctx context.Context, arg UpdateApplicationParams) (Application, error) {
	row := q.db.QueryRow(ctx, updateApplication,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ModelType,
		arg.ModelVendor,
		arg.ModelParameters,
		arg.PromptMessages,
		arg.ExpectedTemplateVariables,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ModelParameters,
		&i.ModelType,
		&i.ModelVendor,
		&i.Name,
		&i.PromptMessages,
		&i.ExpectedTemplateVariables,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectID,
	)
	return i, err
}
