// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: prompt-config.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkDefaultPromptConfigExists = `-- name: CheckDefaultPromptConfigExists :one
SELECT EXISTS(
    SELECT 1
    FROM prompt_config
    WHERE
        application_id = $1
        AND deleted_at IS NULL
        AND is_default = TRUE
)
`

func (q *Queries) CheckDefaultPromptConfigExists(ctx context.Context, applicationID pgtype.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, checkDefaultPromptConfigExists, applicationID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createPromptConfig = `-- name: CreatePromptConfig :one

INSERT INTO prompt_config (
    name,
    model_parameters,
    model_type,
    model_vendor,
    provider_prompt_messages,
    expected_template_variables,
    is_default,
    application_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, name, model_parameters, model_type, model_vendor, provider_prompt_messages, expected_template_variables, is_default, created_at, updated_at, deleted_at, application_id
`

type CreatePromptConfigParams struct {
	Name                      string      `json:"name"`
	ModelParameters           []byte      `json:"modelParameters"`
	ModelType                 ModelType   `json:"modelType"`
	ModelVendor               ModelVendor `json:"modelVendor"`
	ProviderPromptMessages    []byte      `json:"providerPromptMessages"`
	ExpectedTemplateVariables []string    `json:"expectedTemplateVariables"`
	IsDefault                 bool        `json:"isDefault"`
	ApplicationID             pgtype.UUID `json:"applicationId"`
}

// -- prompt config
func (q *Queries) CreatePromptConfig(ctx context.Context, arg CreatePromptConfigParams) (PromptConfig, error) {
	row := q.db.QueryRow(ctx, createPromptConfig,
		arg.Name,
		arg.ModelParameters,
		arg.ModelType,
		arg.ModelVendor,
		arg.ProviderPromptMessages,
		arg.ExpectedTemplateVariables,
		arg.IsDefault,
		arg.ApplicationID,
	)
	var i PromptConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ModelParameters,
		&i.ModelType,
		&i.ModelVendor,
		&i.ProviderPromptMessages,
		&i.ExpectedTemplateVariables,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ApplicationID,
	)
	return i, err
}

const deletePromptConfig = `-- name: DeletePromptConfig :exec
UPDATE prompt_config
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeletePromptConfig(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePromptConfig, id)
	return err
}

const retrieveDefaultPromptConfig = `-- name: RetrieveDefaultPromptConfig :one
SELECT
    id,
    name,
    model_parameters,
    model_type,
    model_vendor,
    provider_prompt_messages,
    expected_template_variables,
    is_default,
    created_at,
    updated_at,
    application_id
FROM prompt_config
WHERE
    application_id = $1
    AND deleted_at IS NULL
    AND is_default = TRUE
`

type RetrieveDefaultPromptConfigRow struct {
	ID                        pgtype.UUID        `json:"id"`
	Name                      string             `json:"name"`
	ModelParameters           []byte             `json:"modelParameters"`
	ModelType                 ModelType          `json:"modelType"`
	ModelVendor               ModelVendor        `json:"modelVendor"`
	ProviderPromptMessages    []byte             `json:"providerPromptMessages"`
	ExpectedTemplateVariables []string           `json:"expectedTemplateVariables"`
	IsDefault                 bool               `json:"isDefault"`
	CreatedAt                 pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt                 pgtype.Timestamptz `json:"updatedAt"`
	ApplicationID             pgtype.UUID        `json:"applicationId"`
}

func (q *Queries) RetrieveDefaultPromptConfig(ctx context.Context, applicationID pgtype.UUID) (RetrieveDefaultPromptConfigRow, error) {
	row := q.db.QueryRow(ctx, retrieveDefaultPromptConfig, applicationID)
	var i RetrieveDefaultPromptConfigRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ModelParameters,
		&i.ModelType,
		&i.ModelVendor,
		&i.ProviderPromptMessages,
		&i.ExpectedTemplateVariables,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApplicationID,
	)
	return i, err
}

const retrievePromptConfig = `-- name: RetrievePromptConfig :one
SELECT
    id,
    name,
    model_parameters,
    model_type,
    model_vendor,
    provider_prompt_messages,
    expected_template_variables,
    is_default,
    created_at,
    updated_at,
    application_id
FROM prompt_config
WHERE
    id = $1
    AND deleted_at IS NULL
`

type RetrievePromptConfigRow struct {
	ID                        pgtype.UUID        `json:"id"`
	Name                      string             `json:"name"`
	ModelParameters           []byte             `json:"modelParameters"`
	ModelType                 ModelType          `json:"modelType"`
	ModelVendor               ModelVendor        `json:"modelVendor"`
	ProviderPromptMessages    []byte             `json:"providerPromptMessages"`
	ExpectedTemplateVariables []string           `json:"expectedTemplateVariables"`
	IsDefault                 bool               `json:"isDefault"`
	CreatedAt                 pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt                 pgtype.Timestamptz `json:"updatedAt"`
	ApplicationID             pgtype.UUID        `json:"applicationId"`
}

func (q *Queries) RetrievePromptConfig(ctx context.Context, id pgtype.UUID) (RetrievePromptConfigRow, error) {
	row := q.db.QueryRow(ctx, retrievePromptConfig, id)
	var i RetrievePromptConfigRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ModelParameters,
		&i.ModelType,
		&i.ModelVendor,
		&i.ProviderPromptMessages,
		&i.ExpectedTemplateVariables,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApplicationID,
	)
	return i, err
}

const retrievePromptConfigs = `-- name: RetrievePromptConfigs :many
SELECT
    id,
    name,
    model_parameters,
    model_type,
    model_vendor,
    provider_prompt_messages,
    expected_template_variables,
    is_default,
    created_at,
    updated_at,
    application_id
FROM prompt_config
WHERE
    application_id = $1
    AND deleted_at IS NULL
`

type RetrievePromptConfigsRow struct {
	ID                        pgtype.UUID        `json:"id"`
	Name                      string             `json:"name"`
	ModelParameters           []byte             `json:"modelParameters"`
	ModelType                 ModelType          `json:"modelType"`
	ModelVendor               ModelVendor        `json:"modelVendor"`
	ProviderPromptMessages    []byte             `json:"providerPromptMessages"`
	ExpectedTemplateVariables []string           `json:"expectedTemplateVariables"`
	IsDefault                 bool               `json:"isDefault"`
	CreatedAt                 pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt                 pgtype.Timestamptz `json:"updatedAt"`
	ApplicationID             pgtype.UUID        `json:"applicationId"`
}

func (q *Queries) RetrievePromptConfigs(ctx context.Context, applicationID pgtype.UUID) ([]RetrievePromptConfigsRow, error) {
	rows, err := q.db.Query(ctx, retrievePromptConfigs, applicationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RetrievePromptConfigsRow
	for rows.Next() {
		var i RetrievePromptConfigsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ModelParameters,
			&i.ModelType,
			&i.ModelVendor,
			&i.ProviderPromptMessages,
			&i.ExpectedTemplateVariables,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ApplicationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const retrieveTotalPromptRequests = `-- name: RetrieveTotalPromptRequests :one
SELECT COUNT(prr.id) AS total_requests
FROM prompt_request_record AS prr
INNER JOIN prompt_config AS pc ON prr.prompt_config_id = pc.id
WHERE
    prr.prompt_config_id = $1
    AND prr.created_at BETWEEN $2 AND $3
`

type RetrieveTotalPromptRequestsParams struct {
	PromptConfigID pgtype.UUID        `json:"promptConfigId"`
	CreatedAt      pgtype.Timestamptz `json:"createdAt"`
	CreatedAt_2    pgtype.Timestamptz `json:"createdAt2"`
}

func (q *Queries) RetrieveTotalPromptRequests(ctx context.Context, arg RetrieveTotalPromptRequestsParams) (int64, error) {
	row := q.db.QueryRow(ctx, retrieveTotalPromptRequests, arg.PromptConfigID, arg.CreatedAt, arg.CreatedAt_2)
	var total_requests int64
	err := row.Scan(&total_requests)
	return total_requests, err
}

const retrieveTotalTokensConsumedPerPromptConfig = `-- name: RetrieveTotalTokensConsumedPerPromptConfig :many
SELECT
    pc.model_type,
    SUM(prr.request_tokens + prr.response_tokens) AS total_tokens
FROM prompt_request_record AS prr
INNER JOIN prompt_config AS pc ON prr.prompt_config_id = pc.id
WHERE
    prr.prompt_config_id = $1
    AND prr.created_at BETWEEN $2 AND $3
GROUP BY pc.model_type
`

type RetrieveTotalTokensConsumedPerPromptConfigParams struct {
	PromptConfigID pgtype.UUID        `json:"promptConfigId"`
	CreatedAt      pgtype.Timestamptz `json:"createdAt"`
	CreatedAt_2    pgtype.Timestamptz `json:"createdAt2"`
}

type RetrieveTotalTokensConsumedPerPromptConfigRow struct {
	ModelType   ModelType `json:"modelType"`
	TotalTokens int64     `json:"totalTokens"`
}

func (q *Queries) RetrieveTotalTokensConsumedPerPromptConfig(ctx context.Context, arg RetrieveTotalTokensConsumedPerPromptConfigParams) ([]RetrieveTotalTokensConsumedPerPromptConfigRow, error) {
	rows, err := q.db.Query(ctx, retrieveTotalTokensConsumedPerPromptConfig, arg.PromptConfigID, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RetrieveTotalTokensConsumedPerPromptConfigRow
	for rows.Next() {
		var i RetrieveTotalTokensConsumedPerPromptConfigRow
		if err := rows.Scan(&i.ModelType, &i.TotalTokens); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDefaultPromptConfig = `-- name: UpdateDefaultPromptConfig :exec
UPDATE prompt_config
SET
    is_default = $2,
    updated_at = NOW()
WHERE
    id = $1
    AND deleted_at IS NULL
`

type UpdateDefaultPromptConfigParams struct {
	ID        pgtype.UUID `json:"id"`
	IsDefault bool        `json:"isDefault"`
}

func (q *Queries) UpdateDefaultPromptConfig(ctx context.Context, arg UpdateDefaultPromptConfigParams) error {
	_, err := q.db.Exec(ctx, updateDefaultPromptConfig, arg.ID, arg.IsDefault)
	return err
}

const updatePromptConfig = `-- name: UpdatePromptConfig :one
UPDATE prompt_config
SET
    name = $2,
    model_parameters = $3,
    model_type = $4,
    model_vendor = $5,
    provider_prompt_messages = $6,
    expected_template_variables = $7,
    updated_at = NOW()
WHERE
    id = $1
    AND deleted_at IS NULL
RETURNING id, name, model_parameters, model_type, model_vendor, provider_prompt_messages, expected_template_variables, is_default, created_at, updated_at, deleted_at, application_id
`

type UpdatePromptConfigParams struct {
	ID                        pgtype.UUID `json:"id"`
	Name                      string      `json:"name"`
	ModelParameters           []byte      `json:"modelParameters"`
	ModelType                 ModelType   `json:"modelType"`
	ModelVendor               ModelVendor `json:"modelVendor"`
	ProviderPromptMessages    []byte      `json:"providerPromptMessages"`
	ExpectedTemplateVariables []string    `json:"expectedTemplateVariables"`
}

func (q *Queries) UpdatePromptConfig(ctx context.Context, arg UpdatePromptConfigParams) (PromptConfig, error) {
	row := q.db.QueryRow(ctx, updatePromptConfig,
		arg.ID,
		arg.Name,
		arg.ModelParameters,
		arg.ModelType,
		arg.ModelVendor,
		arg.ProviderPromptMessages,
		arg.ExpectedTemplateVariables,
	)
	var i PromptConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ModelParameters,
		&i.ModelType,
		&i.ModelVendor,
		&i.ProviderPromptMessages,
		&i.ExpectedTemplateVariables,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ApplicationID,
	)
	return i, err
}
